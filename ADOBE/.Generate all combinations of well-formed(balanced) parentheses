// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;
vector<string> AllParenthesis(int n) ;


 // } Driver Code Ends
//User function Template for C++

// N is the number of pairs of parentheses
// Return list of all combinations of balanced parantheses
class Solution
{
    public:
   
    void helper(int open,int close,vector<string>&ans,string temp)
    {
        if(open==0&&close==0)
        {
          
            ans.push_back(temp);
            return ;
        }
        if(open!=0)
       helper(open-1,close,ans,temp+'(');
       
       if(close>open)
       helper(open,close-1,ans,temp+')');
    }
    vector<string> AllParenthesis(int n) 
    {
        //explore everything choose best
        int open=n;
        int close=n;
        vector<string>ans;
        string op="";
        helper(open,close,ans,op);
        return ans;
        
    }
};

// { Driver Code Starts.


int main() 
{ 
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		Solution ob;
		vector<string> result = ob.AllParenthesis(n); 
		sort(result.begin(),result.end());
		for (int i = 0; i < result.size(); ++i)
			cout<<result[i]<<"\n";
	}
	return 0; 
} 
  // } Driver Code Ends